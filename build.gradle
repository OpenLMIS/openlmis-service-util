import java.text.SimpleDateFormat

apply plugin: 'java'

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

ext {
    ossrhUsername = System.getenv("OSSRH_USERNAME")
    ossrhPassword = System.getenv("OSSRH_PASSWORD")
}
ext.set("signing.secretKeyRingFile", ".signing/secring.gpg")
ext.set("signing.keyId", System.getenv("SIGNING_KEYID"))
ext.set("signing.password", System.getenv("SIGNING_PASSWORD"))

group = serviceGroup
version = serviceVersion
archivesBaseName = serviceName
project.ext.buildTime = java.time.Instant.now().toString() // for versioning
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE'
    }
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile 'commons-beanutils:commons-beanutils:1.9.3'
    compile "org.projectlombok:lombok:1.16.8"
    compile "javax.validation:validation-api:1.1.0.Final"
    compile "org.slf4j:slf4j-api:1.7.16"
    compile 'org.joda:joda-money:0.12'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'


    testCompile "junit:junit:4.12"
}

checkstyle {
    toolVersion = "7.1"
}

pmd {
    toolVersion = '5.4.0'
    consoleOutput= true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd){
    reports {
        xml.enabled true
        html.enabled true
    }
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }

    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

def time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
time.setTimeZone(TimeZone.getTimeZone("GMT"))

def versionToCopy = copySpec {
    from 'src/main/resources'
    include 'version_template'
}

task generateBuildInfo(type:Copy) {
    with versionToCopy
    into 'build/resources/main'
    rename { 'version.properties' }
    expand([
            build: "$System.env.BUILD_NUMBER", // ${build}
            branch: "$System.env.GIT_BRANCH", // ${branch}
            time: time.format(new Date()) + " GMT" // ${time}
    ])
    doLast{
        delete 'src/main/resources/version_template'
    }
}

signing {
    sign configurations.archives
}

test {
    testLogging {
        events 'started', 'passed'
        exceptionFormat = 'full'
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}
signArchives.onlyIf {project.getProperty("signing.keyId") && project.getProperty("signing.password")}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name projectName
                packaging 'jar'
                description projectDescription
                url 'https://openlmis.org'

                scm {
                  url 'https://github.com/openlmis/openlmis-service-util'
                  connection 'scm:git:git://github.com/openlmis/openlmis-service-util.git'
                  developerConnection 'scm:git:git@github.com:openlmis/openlmis-service-util.git'
                }

                developers {
                  developer {
                    id 'techcommittee'
                    name 'tech committee'
                    email 'info@openlmis.org'
                    organizationUrl 'https://villagereach.org'
                  }
                }

                licenses {
                    license {
                        name 'GNU Affero General Public License, Version 3'
                        url 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    }
                }
            }
        }
    }
}
uploadArchives.onlyIf { project.getProperty("ossrhUsername") && project.getProperty("ossrhPassword") }

assemble {
    dependsOn test
    dependsOn jacocoTestReport
    finalizedBy uploadArchives
}

processResources {
    // update version information in build
    filesMatching('**/version.properties') {
        expand(project.properties)
    }
}
